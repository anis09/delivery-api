{"version":3,"sources":["../../src/utils/mailer.ts"],"sourcesContent":["import htmlToText from 'html-to-text';\r\nimport nodemailer from 'nodemailer';\r\nimport pug from 'pug';\r\nimport { vars } from '../constants/vars';\r\n\r\nexport class Mailer {\r\n    public to: string;\r\n    public data: any;\r\n\r\n    constructor(to: string, data: any) {\r\n        this.to = to;\r\n        this.data = data;\r\n    }\r\n\r\n    private newTransport() {\r\n        return nodemailer.createTransport({\r\n            host: vars.smtpHost,\r\n            port: vars.smtpPort,\r\n            auth: {\r\n                user: vars.smtpUser,\r\n                pass: vars.smtpPass\r\n            }\r\n        });\r\n    }\r\n\r\n    async sendEmail(template: string, subject: string) {\r\n        const html = pug.renderFile(`${__dirname}/../views/email/${template}.pug`, {\r\n            data: this.data,\r\n            subject\r\n        });\r\n\r\n        const mailOptions = {\r\n            from: vars.smtpUser,\r\n            to: this.to,\r\n            subject,\r\n            html,\r\n            text: htmlToText.fromString(html)\r\n        };\r\n\r\n        await this.newTransport().sendMail(mailOptions);\r\n    }\r\n\r\n    async sendVerifyAccount() {\r\n        await this.sendEmail('verify-account', 'Please verify your email address');\r\n    }\r\n\r\n    async sendResetPassword() {\r\n        await this.sendEmail('reset-password', 'Reset your password');\r\n    }\r\n\r\n    async sendResetPasswordDash() {\r\n        await this.sendEmail('reset-password-dash', 'Reset your password');\r\n    }\r\n\r\n    async sendGetPasswordDash() {\r\n        await this.sendEmail('get-password-dash', 'Get your password');\r\n    }\r\n}"],"names":["Mailer","newTransport","nodemailer","createTransport","host","vars","smtpHost","port","smtpPort","auth","user","smtpUser","pass","smtpPass","sendEmail","template","subject","html","pug","renderFile","__dirname","data","mailOptions","from","to","text","htmlToText","fromString","sendMail","sendVerifyAccount","sendResetPassword","sendResetPasswordDash","sendGetPasswordDash","constructor"],"mappings":";;;;+BAKaA;;;eAAAA;;;qDALU;qDACA;8CACP;sBACK;;;;;;;;;;;;;;;;;;;AAEd,IAAA,AAAMA,SAAN,MAAMA;IASDC,eAAe;QACnB,OAAOC,mBAAU,CAACC,eAAe,CAAC;YAC9BC,MAAMC,UAAI,CAACC,QAAQ;YACnBC,MAAMF,UAAI,CAACG,QAAQ;YACnBC,MAAM;gBACFC,MAAML,UAAI,CAACM,QAAQ;gBACnBC,MAAMP,UAAI,CAACQ,QAAQ;YACvB;QACJ;IACJ;IAEA,MAAMC,UAAUC,QAAgB,EAAEC,OAAe,EAAE;QAC/C,MAAMC,OAAOC,YAAG,CAACC,UAAU,CAAC,CAAC,EAAEC,UAAU,gBAAgB,EAAEL,SAAS,IAAI,CAAC,EAAE;YACvEM,MAAM,IAAI,CAACA,IAAI;YACfL;QACJ;QAEA,MAAMM,cAAc;YAChBC,MAAMlB,UAAI,CAACM,QAAQ;YACnBa,IAAI,IAAI,CAACA,EAAE;YACXR;YACAC;YACAQ,MAAMC,mBAAU,CAACC,UAAU,CAACV;QAChC;QAEA,MAAM,IAAI,CAAChB,YAAY,GAAG2B,QAAQ,CAACN;IACvC;IAEA,MAAMO,oBAAoB;QACtB,MAAM,IAAI,CAACf,SAAS,CAAC,kBAAkB;IAC3C;IAEA,MAAMgB,oBAAoB;QACtB,MAAM,IAAI,CAAChB,SAAS,CAAC,kBAAkB;IAC3C;IAEA,MAAMiB,wBAAwB;QAC1B,MAAM,IAAI,CAACjB,SAAS,CAAC,uBAAuB;IAChD;IAEA,MAAMkB,sBAAsB;QACxB,MAAM,IAAI,CAAClB,SAAS,CAAC,qBAAqB;IAC9C;IA/CAmB,YAAYT,EAAU,EAAEH,IAAS,CAAE;QAHnC,uBAAOG,MAAP,KAAA;QACA,uBAAOH,QAAP,KAAA;QAGI,IAAI,CAACG,EAAE,GAAGA;QACV,IAAI,CAACH,IAAI,GAAGA;IAChB;AA6CJ"}