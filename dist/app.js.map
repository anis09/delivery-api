{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from \"compression\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport cors from \"cors\";\r\nimport express from \"express\";\r\nimport helmet from \"helmet\";\r\nimport hpp from \"hpp\";\r\nimport { connect } from \"mongoose\";\r\nimport morgan from \"morgan\";\r\nimport { vars } from \"./constants/vars\";\r\nimport { Routes } from \"./interfaces/routes.interface\";\r\nimport errorMiddleware from \"./middlewares/error.middleware\";\r\nimport { logger, stream } from \"./utils/logger\";\r\n\r\nclass App {\r\n  public app: express.Application;\r\n\r\n  constructor(routes: Routes[]) {\r\n    this.app = express();\r\n\r\n    this.app.use(express.static(\"public\"));\r\n\r\n\r\n    this.connectToMongoDB();\r\n    this.initializeMiddlewares();\r\n    this.initializeRoutes(routes);\r\n    this.initializeErrorHandling();\r\n  }\r\n\r\n  public listen() {\r\n    this.app.listen(vars.port, () => {\r\n      logger.info(`=================================`);\r\n      logger.info(`======== ENV: ${vars.env} ========`);\r\n      logger.info(`ðŸš€ App listening on the port ${vars.port}`);\r\n\r\n    });\r\n  }\r\n\r\n  public getServer() {\r\n    return this.app;\r\n  }\r\n\r\n  private connectToMongoDB() {\r\n    connect(vars.mongoUri);\r\n  }\r\n\r\n  private initializeMiddlewares() {\r\n    this.app.use(express.json({ limit: \"50mb\" }));\r\n    this.app.use(\r\n      express.urlencoded({\r\n        limit: \"50mb\",\r\n        extended: true,\r\n        parameterLimit: 50000,\r\n      })\r\n    );\r\n    this.app.use(compression());\r\n    this.app.use(cookieParser());\r\n    this.app.use(cors());\r\n    this.app.use(helmet());\r\n    this.app.use(hpp());\r\n    this.app.use(morgan(\"dev\", { stream }));\r\n  }\r\n\r\n  private initializeRoutes(routes: Routes[]) {\r\n    routes.forEach((route) => {\r\n      this.app.use(\"/\", route.router);\r\n    });\r\n  }\r\n\r\n  private initializeErrorHandling() {\r\n    this.app.use(errorMiddleware);\r\n  }\r\n}\r\n\r\nexport default App;"],"names":["App","listen","app","vars","port","logger","info","env","getServer","connectToMongoDB","connect","mongoUri","initializeMiddlewares","use","express","json","limit","urlencoded","extended","parameterLimit","compression","cookieParser","cors","helmet","hpp","morgan","stream","initializeRoutes","routes","forEach","route","router","initializeErrorHandling","errorMiddleware","constructor","static"],"mappings":";;;;+BAyEA;;;eAAA;;;sDAzEwB;uDACC;+CACR;kDACG;iDACD;8CACH;0BACQ;iDACL;sBACE;0DAEO;wBACG;;;;;;;;;;;;;;;;;;;AAE/B,IAAA,AAAMA,MAAN,MAAMA;IAeGC,SAAS;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAACE,UAAI,CAACC,IAAI,EAAE,IAAM;YAC/BC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;YAC/CD,cAAM,CAACC,IAAI,CAAC,CAAC,cAAc,EAAEH,UAAI,CAACI,GAAG,CAAC,SAAS,CAAC;YAChDF,cAAM,CAACC,IAAI,CAAC,CAAC,6BAA6B,EAAEH,UAAI,CAACC,IAAI,CAAC,CAAC;QAEzD;IACF;IAEOI,YAAY;QACjB,OAAO,IAAI,CAACN,GAAG;IACjB;IAEQO,mBAAmB;QACzBC,IAAAA,iBAAO,EAACP,UAAI,CAACQ,QAAQ;IACvB;IAEQC,wBAAwB;QAC9B,IAAI,CAACV,GAAG,CAACW,GAAG,CAACC,gBAAO,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAO;QAC1C,IAAI,CAACd,GAAG,CAACW,GAAG,CACVC,gBAAO,CAACG,UAAU,CAAC;YACjBD,OAAO;YACPE,UAAU,IAAI;YACdC,gBAAgB;QAClB;QAEF,IAAI,CAACjB,GAAG,CAACW,GAAG,CAACO,IAAAA,oBAAW;QACxB,IAAI,CAAClB,GAAG,CAACW,GAAG,CAACQ,IAAAA,qBAAY;QACzB,IAAI,CAACnB,GAAG,CAACW,GAAG,CAACS,IAAAA,aAAI;QACjB,IAAI,CAACpB,GAAG,CAACW,GAAG,CAACU,IAAAA,eAAM;QACnB,IAAI,CAACrB,GAAG,CAACW,GAAG,CAACW,IAAAA,YAAG;QAChB,IAAI,CAACtB,GAAG,CAACW,GAAG,CAACY,IAAAA,eAAM,EAAC,OAAO;YAAEC,QAAAA,cAAM;QAAC;IACtC;IAEQC,iBAAiBC,MAAgB,EAAE;QACzCA,OAAOC,OAAO,CAAC,CAACC,QAAU;YACxB,IAAI,CAAC5B,GAAG,CAACW,GAAG,CAAC,KAAKiB,MAAMC,MAAM;QAChC;IACF;IAEQC,0BAA0B;QAChC,IAAI,CAAC9B,GAAG,CAACW,GAAG,CAACoB,wBAAe;IAC9B;IAtDAC,YAAYN,MAAgB,CAAE;QAF9B,uBAAO1B,OAAP,KAAA;QAGE,IAAI,CAACA,GAAG,GAAGY,IAAAA,gBAAO;QAElB,IAAI,CAACZ,GAAG,CAACW,GAAG,CAACC,gBAAO,CAACqB,MAAM,CAAC;QAG5B,IAAI,CAAC1B,gBAAgB;QACrB,IAAI,CAACG,qBAAqB;QAC1B,IAAI,CAACe,gBAAgB,CAACC;QACtB,IAAI,CAACI,uBAAuB;IAC9B;AA6CF;MAEA,WAAehC"}