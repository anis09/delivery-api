{"version":3,"sources":["../../src/services/delivery.service.ts"],"sourcesContent":["import {\r\n  CreateDeliveryReqDto,\r\n  CreateDeliveryResDto,\r\n  DeleteDeliveryResDto,\r\n  UpdateDeliveryReqDto,\r\n  UpdateDeliveryResDto,\r\n} from \"../dtos/delivery.dto\";\r\nimport { Delivery } from \"../interfaces/models/delivery.model.interface\";\r\nimport { deliveryModel } from \"../models/delivery.model\";\r\nimport { HttpException } from \"../middlewares/error.middleware\";\r\nimport { errors } from \"../constants/errors\";\r\n\r\nexport class DeliveryService {\r\n  private deliveries = deliveryModel;\r\n\r\n  public async createDelivery(input: CreateDeliveryReqDto): Promise<Delivery> {\r\n    let result: Delivery;\r\n    let newDelivery = new this.deliveries({\r\n      delivery_time: input.delivery_time,\r\n      delivery_address: input.delivery_adress,\r\n      delivery_city: input.delivery_city,\r\n      delivery_state: input.delivery_state,\r\n      delivery_zipcode: input.delivery_zipCode,\r\n      delivery_items: input.delivery_items,\r\n      delivery_status: input.delivery_status,\r\n    });\r\n    result = await newDelivery.save();\r\n    if (result) {\r\n      return result;\r\n    }\r\n  }\r\n  \r\n  public async getAllDeliveries(): Promise<Delivery[]> {\r\n    let deliveries: Delivery[] = await this.deliveries.find();\r\n    return deliveries;\r\n  }\r\n\r\n  public async updateDelivery(\r\n    input: UpdateDeliveryReqDto,\r\n    deliveryId: string\r\n  ): Promise<UpdateDeliveryResDto> {\r\n    let foundDelivery = await this.deliveries.findOne({ _id: deliveryId });\r\n    if (!foundDelivery)\r\n      throw new HttpException(404, errors.DELIVERY_DOES_NOT_EXIST);\r\n\r\n    const updatedDelivery: Delivery = await this.deliveries.findByIdAndUpdate(\r\n      deliveryId,\r\n      input,\r\n      { new: true }\r\n    );\r\n    return {\r\n      success: updatedDelivery != null ? true : false,\r\n    };\r\n  }\r\n  public async deleteDelivery(deliveryId:string):Promise<DeleteDeliveryResDto>{\r\n    let foundDelivery = await this.deliveries.findOne({_id:deliveryId})\r\n    if(!foundDelivery) throw new HttpException(404,errors.DELIVERY_DOES_NOT_EXIST)\r\n\r\n    await this.deliveries.findByIdAndDelete({_id:deliveryId})\r\n    return{\r\n      success:true\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeliveryService;\r\n"],"names":["DeliveryService","createDelivery","input","result","newDelivery","deliveries","delivery_time","delivery_address","delivery_adress","delivery_city","delivery_state","delivery_zipcode","delivery_zipCode","delivery_items","delivery_status","save","getAllDeliveries","find","updateDelivery","deliveryId","foundDelivery","findOne","_id","HttpException","errors","DELIVERY_DOES_NOT_EXIST","updatedDelivery","findByIdAndUpdate","new","success","deleteDelivery","findByIdAndDelete","deliveryModel"],"mappings":";;;;;;;;;;;IAYaA,eAAe;eAAfA;;IAqDb,OAA+B;eAA/B;;;+BAzD8B;iCACA;wBACP;;;;;;;;;;;;;;AAEhB,IAAA,AAAMA,kBAAN,MAAMA;IAGX,MAAaC,eAAeC,KAA2B,EAAqB;QAC1E,IAAIC;QACJ,IAAIC,cAAc,IAAI,IAAI,CAACC,UAAU,CAAC;YACpCC,eAAeJ,MAAMI,aAAa;YAClCC,kBAAkBL,MAAMM,eAAe;YACvCC,eAAeP,MAAMO,aAAa;YAClCC,gBAAgBR,MAAMQ,cAAc;YACpCC,kBAAkBT,MAAMU,gBAAgB;YACxCC,gBAAgBX,MAAMW,cAAc;YACpCC,iBAAiBZ,MAAMY,eAAe;QACxC;QACAX,SAAS,MAAMC,YAAYW,IAAI;QAC/B,IAAIZ,QAAQ;YACV,OAAOA;QACT,CAAC;IACH;IAEA,MAAaa,mBAAwC;QACnD,IAAIX,aAAyB,MAAM,IAAI,CAACA,UAAU,CAACY,IAAI;QACvD,OAAOZ;IACT;IAEA,MAAaa,eACXhB,KAA2B,EAC3BiB,UAAkB,EACa;QAC/B,IAAIC,gBAAgB,MAAM,IAAI,CAACf,UAAU,CAACgB,OAAO,CAAC;YAAEC,KAAKH;QAAW;QACpE,IAAI,CAACC,eACH,MAAM,IAAIG,8BAAa,CAAC,KAAKC,cAAM,CAACC,uBAAuB,EAAE;QAE/D,MAAMC,kBAA4B,MAAM,IAAI,CAACrB,UAAU,CAACsB,iBAAiB,CACvER,YACAjB,OACA;YAAE0B,KAAK,IAAI;QAAC;QAEd,OAAO;YACLC,SAASH,mBAAmB,IAAI,GAAG,IAAI,GAAG,KAAK;QACjD;IACF;IACA,MAAaI,eAAeX,UAAiB,EAA+B;QAC1E,IAAIC,gBAAgB,MAAM,IAAI,CAACf,UAAU,CAACgB,OAAO,CAAC;YAACC,KAAIH;QAAU;QACjE,IAAG,CAACC,eAAe,MAAM,IAAIG,8BAAa,CAAC,KAAIC,cAAM,CAACC,uBAAuB,EAAC;QAE9E,MAAM,IAAI,CAACpB,UAAU,CAAC0B,iBAAiB,CAAC;YAACT,KAAIH;QAAU;QACvD,OAAM;YACJU,SAAQ,IAAI;QACd;IACF;;QAjDA,uBAAQxB,cAAa2B,4BAAa;;AAkDpC;MAEA,WAAehC"}