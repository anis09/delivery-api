{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { compareSync, hashSync } from \"bcrypt\";\r\nimport crypto from \"crypto\";\r\nimport { verify } from \"jsonwebtoken\";\r\nimport { ActivationStatus } from \"../constants/enums\";\r\nimport { errors } from \"../constants/errors\";\r\nimport { vars } from \"../constants/vars\";\r\nimport {\r\n  CheckEmailReqDto,\r\n  CheckEmailResDto,\r\n  ResendVerificationCodeEmailReqDto,\r\n  ResendVerificationCodeEmailResDto,\r\n  ResetPasswordReqDto,\r\n  ResetPasswordResDto,\r\n  SendPasswordResetEmailReqDto,\r\n  SendPasswordResetEmailResDto,\r\n  SignInUserReqDto,\r\n  SignInUserResDto,\r\n  SignOutUserResDto,\r\n  SignUpUserReqDto,\r\n  SignUpUserResDto,\r\n  VerifyUserAccountReqDto,\r\n  VerifyUserAccountResDto,\r\n} from \"../dtos/auth.dto\";\r\nimport { User } from \"../interfaces/models/user.model.interface\";\r\nimport { HttpException } from \"../middlewares/error.middleware\";\r\nimport { userModel } from \"../models/user.model\";\r\nimport { generateAccessToken } from \"../utils/auth\";\r\nimport { Mailer } from \"../utils/mailer\";\r\n\r\nclass AuthService {\r\n  private users = userModel;\r\n\r\n  public async checkEmail(input: CheckEmailReqDto): Promise<CheckEmailResDto> {\r\n    let isExists: boolean = false;\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.email\": input.email.toLowerCase(),\r\n      isArchived: false,\r\n    });\r\n\r\n    if (foundUser) {\r\n      isExists = true;\r\n    }\r\n\r\n    return {\r\n      isExists,\r\n    };\r\n  }\r\n\r\n  public async signUpUser(input: SignUpUserReqDto): Promise<SignUpUserResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.email\": input.email.toLowerCase(),\r\n      isArchived: false,\r\n    });\r\n    if (foundUser) throw new HttpException(409, errors.EMAIL_ALREADY_EXISTS);\r\n\r\n    const user: User = await this.users.create({\r\n      account: {\r\n        role: \"STANDARD\",\r\n        activationStatus: \"ACTIVE\",\r\n        isVerified: false,\r\n        verificationCode: crypto.randomBytes(32).toString(\"hex\"),\r\n        verificationExpireAt: new Date(\r\n          new Date().setHours(\r\n            new Date().getHours() + vars.verificationCodeExpInHours\r\n          )\r\n        ),\r\n        email: input.email.toLowerCase(),\r\n        password: hashSync(input.password, 10),\r\n      },\r\n      profile: {\r\n        firstName: input.firstName,\r\n        lastName: input.lastName,\r\n      },\r\n    });\r\n\r\n    new Mailer(user.account.email, {\r\n      name: user.profile.firstName,\r\n      url: `${vars.appLink}/auth/verify-account/${user.account.verificationCode}`,\r\n    }).sendVerifyAccount();\r\n\r\n    return {\r\n      success: true,\r\n      userId: user._id,\r\n    };\r\n  }\r\n\r\n  public async verifyUserAccount(\r\n    input: VerifyUserAccountReqDto\r\n  ): Promise<VerifyUserAccountResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.verificationCode\": input.verificationCode,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(404, errors.USER_NOT_FOUND);\r\n\r\n    if (foundUser.account.isVerified)\r\n      throw new HttpException(409, errors.ACCOUNT_ALREADY_VERIFIED);\r\n\r\n    if (\r\n      foundUser.account.verificationCode !== input.verificationCode ||\r\n      foundUser.account.verificationExpireAt <= new Date()\r\n    )\r\n      throw new HttpException(409, errors.INVALID_VERIFICATION_CODE);\r\n\r\n    await this.users.findOneAndUpdate(\r\n      { \"account.verificationCode\": input.verificationCode },\r\n      {\r\n        $set: {\r\n          \"account.isVerified\": true,\r\n          updatedAt: new Date(),\r\n        },\r\n        $unset: {\r\n          \"account.verificationCode\": 1,\r\n          \"account.verificationExpireAt\": 1,\r\n        },\r\n      }\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  }\r\n\r\n  public async resendVerificationCodeEmail(\r\n    input: ResendVerificationCodeEmailReqDto\r\n  ): Promise<ResendVerificationCodeEmailResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.email\": input.email.toLowerCase(),\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(404, errors.USER_NOT_FOUND);\r\n\r\n    if (foundUser.account.isVerified)\r\n      throw new HttpException(409, errors.ACCOUNT_ALREADY_VERIFIED);\r\n\r\n    const updatedUser: User = await this.users.findOneAndUpdate(\r\n      { \"account.email\": input.email.toLowerCase() },\r\n      {\r\n        $set: {\r\n          \"account.verificationCode\": crypto.randomBytes(32).toString(\"hex\"),\r\n          \"account.verificationExpireAt\": new Date(\r\n            new Date().setHours(\r\n              new Date().getHours() + vars.verificationCodeExpInHours\r\n            )\r\n          ),\r\n          updatedAt: new Date(),\r\n        },\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    new Mailer(foundUser.account.email, {\r\n      name: foundUser.profile.firstName,\r\n      url: `${vars.appLink}/auth/verify-account/${updatedUser.account.verificationCode}`,\r\n    }).sendVerifyAccount();\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  }\r\n\r\n  public async sendPasswordResetEmail(\r\n    input: SendPasswordResetEmailReqDto\r\n  ): Promise<SendPasswordResetEmailResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.email\": input.email.toLowerCase(),\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(409, errors.EMAIL_NOT_FOUND);\r\n\r\n    const updatedUser: User = await this.users.findOneAndUpdate(\r\n      { _id: foundUser._id },\r\n      {\r\n        $set: {\r\n          \"account.passwordRecoveryToken\": crypto\r\n            .randomBytes(32)\r\n            .toString(\"hex\"),\r\n          \"account.passwordRecoveryExpireAt\": new Date(\r\n            new Date().setHours(\r\n              new Date().getHours() + vars.recoveryTokenExpInHours\r\n            )\r\n          ),\r\n          updatedAt: new Date(),\r\n        },\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    new Mailer(foundUser.account.email, {\r\n      name: foundUser.profile.firstName,\r\n      url: `${vars.appLink}/reset-password/${updatedUser.account.passwordRecoveryToken}`,\r\n    }).sendResetPassword();\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  }\r\n\r\n  public async resetPassword(\r\n    input: ResetPasswordReqDto\r\n  ): Promise<ResetPasswordResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.passwordRecoveryToken\": input.passwordRecoveryToken,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser || foundUser.account.passwordRecoveryExpireAt <= new Date())\r\n      throw new HttpException(409, errors.INVALID_PASSWORD_RECOVERY_TOKEN);\r\n\r\n    await this.users.findOneAndUpdate(\r\n      { _id: foundUser._id },\r\n      {\r\n        $set: {\r\n          \"account.password\": hashSync(input.newPassword, 10),\r\n          \"account.passwordRecoveredAt\": new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n        $unset: {\r\n          \"account.passwordRecoveryToken\": 1,\r\n          \"account.passwordRecoveryExpireAt\": 1,\r\n        },\r\n      }\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  }\r\n\r\n  public async signInUser(input: SignInUserReqDto): Promise<SignInUserResDto> {\r\n    let lastSignIn: string = \"\";\r\n    const foundUser: User = await this.users.findOne({\r\n      \"account.email\": input.email.toLowerCase(),\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(401, errors.WRONG_CREDENTIALS);\r\n\r\n    if (foundUser.account.activationStatus === ActivationStatus.Blocked)\r\n      throw new HttpException(409, errors.ACCOUNT_HAS_BEEN_BLOCKED);\r\n\r\n    if (!compareSync(input.password, foundUser.account.password))\r\n      throw new HttpException(401, errors.WRONG_CREDENTIALS);\r\n\r\n    let updateQuery: any = {\r\n      $set: {\r\n        \"account.lastSignIn\": new Date(),\r\n        updatedAt: new Date(),\r\n      },\r\n    };\r\n\r\n    lastSignIn = foundUser.account.lastSignIn\r\n      ? foundUser.account.lastSignIn.toDateString()\r\n      : null;\r\n    if (foundUser.account.activationStatus === ActivationStatus.Inactive) {\r\n      updateQuery = {\r\n        $set: {\r\n          \"account.activationStatus\": ActivationStatus.Active,\r\n          \"account.lastSignIn\": new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      };\r\n    }\r\n\r\n    await this.users.findOneAndUpdate({ _id: foundUser._id }, updateQuery);\r\n\r\n    return {\r\n      success: true,\r\n      accessToken: generateAccessToken(foundUser._id),\r\n      lastSignIn: lastSignIn == \"\" ? null : lastSignIn,\r\n      userId: foundUser._id,\r\n    };\r\n  }\r\n\r\n  public async signOutUser(userId: string): Promise<SignOutUserResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      _id: userId,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(401, errors.WRONG_CREDENTIALS);\r\n\r\n    await this.users.findOneAndUpdate(\r\n      { _id: foundUser._id },\r\n      {\r\n        $set: {\r\n          \"account.lastSignOut\": new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      }\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  }\r\n\r\n  public async refreshAccessToken(refreshToken: string): Promise<any> {\r\n    if (refreshToken) {\r\n      try {\r\n        let decoded = verify(refreshToken, vars.jwtRefreshKey);\r\n      } catch (error) {\r\n        return {\r\n          success: false,\r\n          message: \"Invalid Token\",\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: \"Invalid Token\",\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"names":["AuthService","checkEmail","input","isExists","foundUser","users","findOne","email","toLowerCase","isArchived","signUpUser","HttpException","errors","EMAIL_ALREADY_EXISTS","user","create","account","role","activationStatus","isVerified","verificationCode","crypto","randomBytes","toString","verificationExpireAt","Date","setHours","getHours","vars","verificationCodeExpInHours","password","hashSync","profile","firstName","lastName","Mailer","name","url","appLink","sendVerifyAccount","success","userId","_id","verifyUserAccount","USER_NOT_FOUND","ACCOUNT_ALREADY_VERIFIED","INVALID_VERIFICATION_CODE","findOneAndUpdate","$set","updatedAt","$unset","resendVerificationCodeEmail","updatedUser","new","sendPasswordResetEmail","EMAIL_NOT_FOUND","recoveryTokenExpInHours","passwordRecoveryToken","sendResetPassword","resetPassword","passwordRecoveryExpireAt","INVALID_PASSWORD_RECOVERY_TOKEN","newPassword","signInUser","lastSignIn","WRONG_CREDENTIALS","ActivationStatus","Blocked","ACCOUNT_HAS_BEEN_BLOCKED","compareSync","updateQuery","toDateString","Inactive","Active","accessToken","generateAccessToken","signOutUser","refreshAccessToken","refreshToken","decoded","verify","jwtRefreshKey","error","message","userModel"],"mappings":"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"}