{"version":3,"sources":["../../src/services/user.service.ts"],"sourcesContent":["import { compareSync, hashSync } from \"bcrypt\";\r\nimport crypto from \"crypto\";\r\nimport mongoose from \"mongoose\";\r\nimport generator from 'generate-password';\r\nimport {\r\n  DeleteCurrentUserResDto,\r\n  GetCurrentUserResDto,\r\n  UpdateCurrentUserReqDto,\r\n  UpdateCurrentUserResDto,\r\n  UpdatePasswordReqDto,\r\n  UpdatePasswordResDto,\r\n  UserDto,\r\n} from \"../dtos/user.dto\";\r\nimport { errors } from \"../constants/errors\";\r\nimport { vars } from \"../constants/vars\";\r\nimport { User } from \"../interfaces/models/user.model.interface\";\r\nimport { HttpException } from \"../middlewares/error.middleware\";\r\nimport { userModel } from \"../models/user.model\";\r\nimport { Mailer } from \"../utils/mailer\";\r\nclass UserService {\r\n  private users = userModel;\r\n  public async getUsers(): Promise<any> {\r\n   \r\n    const users = await this.users.aggregate([\r\n      {\r\n        $match: {\r\n          isArchived: false,\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          _id: 1,\r\n          \"account.kind\": 1,\r\n          \"profile.firstName\": 1,\r\n          \"profile.lastName\": 1,\r\n          \"profile.avatarUrl\": 1,\r\n        },\r\n      },\r\n    ]);\r\n\r\n    return users;\r\n  }\r\n  public async getCurrentUser(userId: string): Promise<GetCurrentUserResDto> {\r\n    const foundUsers: GetCurrentUserResDto[] = await this.users.aggregate([\r\n      {\r\n        $match: {\r\n          _id: new mongoose.Types.ObjectId(userId),\r\n          isArchived: false,\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          _id: 0,\r\n          userId: {\r\n            $toString: \"$_id\",\r\n          },\r\n          account: {\r\n            role: \"$account.role\",\r\n            isVerified: \"$account.isVerified\",\r\n            email: \"$account.email\",\r\n          },\r\n          profile: \"$profile\",\r\n        },\r\n      },\r\n    ]);\r\n\r\n    if (!foundUsers || foundUsers.length === 0) return null;\r\n\r\n    return foundUsers[0];\r\n  }\r\n\r\n  public async updateCurrentUser(\r\n    userId: string,\r\n    input: UpdateCurrentUserReqDto\r\n  ): Promise<UpdateCurrentUserResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      _id: userId,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(404, errors.USER_NOT_FOUND);\r\n\r\n    const updatedCurrentUser = await this.users.findOneAndUpdate(\r\n      { _id: userId },\r\n      {\r\n        $set: {\r\n          \"account.email\": input.email\r\n            ? input.email.toLowerCase()\r\n            : foundUser.account.email,\r\n          \"profile.firstName\": input.firstName\r\n            ? input.firstName\r\n            : foundUser.profile.firstName,\r\n          \"profile.lastName\": input.lastName\r\n            ? input.lastName\r\n            : foundUser.profile.lastName,\r\n          \"profile.phone\": input.phone ? input.phone : foundUser.profile.phone,\r\n          \"profile.avatarUrl\": input.avatarUrl\r\n            ? input.avatarUrl\r\n            : foundUser.profile.avatarUrl,\r\n          updatedAt: new Date(),\r\n        },\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    return {\r\n      success: updatedCurrentUser != null ? true : false,\r\n    };\r\n  }\r\n\r\n\r\n  public async updatePassword(\r\n    userId: string,\r\n    input: UpdatePasswordReqDto\r\n  ): Promise<UpdatePasswordResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      _id: userId,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(404, errors.USER_NOT_FOUND);\r\n\r\n    if (!compareSync(input.oldPassword, foundUser.account.password))\r\n      throw new HttpException(409, errors.WRONG_PASSWORD);\r\n\r\n    const updatedPassword = await this.users.findOneAndUpdate(\r\n      { _id: userId },\r\n      {\r\n        $set: {\r\n          \"account.password\": hashSync(input.newPassword, 10),\r\n          updatedAt: new Date(),\r\n        },\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    return {\r\n      success: updatedPassword != null ? true : false,\r\n    };\r\n  }\r\n\r\n\r\n  public async deleteCurrentUser(\r\n    userId: string\r\n  ): Promise<DeleteCurrentUserResDto> {\r\n    const foundUser: User = await this.users.findOne({\r\n      _id: userId,\r\n      isArchived: false,\r\n    });\r\n    if (!foundUser) throw new HttpException(404, errors.USER_NOT_FOUND);\r\n\r\n    const deletedCurrentUser = await this.users.findOneAndUpdate(\r\n      { _id: userId },\r\n      {\r\n        $set: {\r\n          isArchived: true,\r\n          updatedAt: new Date(),\r\n        },\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    return {\r\n      success: deletedCurrentUser != null ? true : false,\r\n    };\r\n  }\r\n   \r\n}\r\n\r\nexport default UserService;\r\n"],"names":["UserService","getUsers","users","aggregate","$match","isArchived","$project","_id","getCurrentUser","userId","foundUsers","mongoose","Types","ObjectId","$toString","account","role","isVerified","email","profile","length","updateCurrentUser","input","foundUser","findOne","HttpException","errors","USER_NOT_FOUND","updatedCurrentUser","findOneAndUpdate","$set","toLowerCase","firstName","lastName","phone","avatarUrl","updatedAt","Date","new","success","updatePassword","compareSync","oldPassword","password","WRONG_PASSWORD","updatedPassword","hashSync","newPassword","deleteCurrentUser","deletedCurrentUser","userModel"],"mappings":"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"}