{"version":3,"sources":["../../src/controllers/delivery.controller.ts"],"sourcesContent":["import { CreateDeliveryReqDto, CreateDeliveryResDto, DeleteDeliveryResDto, UpdateDeliveryReqDto, UpdateDeliveryResDto } from \"../dtos/delivery.dto\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport DeliveryService from \"../services/delivery.service\";\r\nimport { Delivery } from \"../interfaces/models/delivery.model.interface\";\r\n\r\nclass DeliveryController {\r\n  private deliveryService = new DeliveryService();\r\n\r\n  public createDelivery = async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n  ) => {\r\n    try {\r\n      const inputData: CreateDeliveryReqDto = req.body as any;\r\n      const outputData: Delivery = await this.deliveryService.createDelivery(\r\n        inputData\r\n      );\r\n      res.status(200).json(outputData);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n  public getAllDeliveries = async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n  ) => {\r\n    try {\r\n      const deliveries: Delivery[] = await this.deliveryService.getAllDeliveries();\r\n      res.status(200).json(deliveries);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n  public updateDelivery = async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n  ) => {\r\n    try {\r\n      const { deliveryId } = req.params as any;\r\n      const input: UpdateDeliveryReqDto = req.body;\r\n      const outputData: UpdateDeliveryResDto = await this.deliveryService.updateDelivery(\r\n        input,\r\n        deliveryId,\r\n      );\r\n      res.status(200).json(outputData);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n  public deleteDelivery = async(\r\n    req:Request,\r\n    res:Response,\r\n    next:NextFunction\r\n  )=>{\r\n    try{\r\n        const {deliveryId} =req.params as any;\r\n        const outputData: DeleteDeliveryResDto=await this.deliveryService.deleteDelivery(deliveryId);\r\n        res.status(200).json(outputData);\r\n    }catch(error){\r\n        next(error);\r\n    }\r\n  };\r\n}\r\nexport default DeliveryController;\r\n"],"names":["DeliveryController","deliveryService","DeliveryService","createDelivery","req","res","next","inputData","body","outputData","status","json","error","getAllDeliveries","deliveries","updateDelivery","deliveryId","params","input","deleteDelivery"],"mappings":";;;;+BAkEA;;;eAAA;;;0DAhE4B;;;;;;;;;;;;;;;;;;;AAG5B,IAAA,AAAMA,qBAAN,MAAMA;;QACJ,uBAAQC,mBAAkB,IAAIC,wBAAe;QAE7C,uBAAOC,kBAAiB,OACtBC,KACAC,KACAC,OACG;YACH,IAAI;gBACF,MAAMC,YAAkCH,IAAII,IAAI;gBAChD,MAAMC,aAAuB,MAAM,IAAI,CAACR,eAAe,CAACE,cAAc,CACpEI;gBAEFF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACF;YACvB,EAAE,OAAOG,OAAO;gBACdN,KAAKM;YACP;QACF;QACA,uBAAOC,oBAAmB,OACxBT,KACAC,KACAC,OACG;YACH,IAAI;gBACF,MAAMQ,aAAyB,MAAM,IAAI,CAACb,eAAe,CAACY,gBAAgB;gBAC1ER,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACG;YACvB,EAAE,OAAOF,OAAO;gBACdN,KAAKM;YACP;QACF;QACA,uBAAOG,kBAAiB,OACtBX,KACAC,KACAC,OACG;YACH,IAAI;gBACF,MAAM,EAAEU,WAAU,EAAE,GAAGZ,IAAIa,MAAM;gBACjC,MAAMC,QAA8Bd,IAAII,IAAI;gBAC5C,MAAMC,aAAmC,MAAM,IAAI,CAACR,eAAe,CAACc,cAAc,CAChFG,OACAF;gBAEFX,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACF;YACvB,EAAE,OAAOG,OAAO;gBACdN,KAAKM;YACP;QACF;QACA,uBAAOO,kBAAiB,OACtBf,KACAC,KACAC,OACC;YACD,IAAG;gBACC,MAAM,EAACU,WAAU,EAAC,GAAEZ,IAAIa,MAAM;gBAC9B,MAAMR,aAAiC,MAAM,IAAI,CAACR,eAAe,CAACkB,cAAc,CAACH;gBACjFX,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACF;YACzB,EAAC,OAAMG,OAAM;gBACTN,KAAKM;YACT;QACF;;AACF;MACA,WAAeZ"}